using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;

namespace Calc
{
    class Program
    {
        static void Main(string[] args)
        {
            int[] mas = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
            int sum = 0;
            foreach (var item in mas)
            {
                sum += item;
            }
            Console.WriteLine(sum);
            Console.Read();
        }
        static void SumOfEvenElementsOfMassive()
        {
            int[] mas = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
            int sum = 0;
            foreach (var item in mas)
            {
                if (item % 2 == 0)
                {
                    sum += item;
                }
            }
            Console.WriteLine(sum);
            Console.Read();

        }



        static void FindDomenFromEmail()
        {
            string IgorEmail = "1232adwda@mail.ru";

            Console.WriteLine(GetDomainByEmail(IgorEmail));
            Console.Read();
        }
        static string GetDomainByEmail(string Email)
        {
            string domain = "";
            bool isDomainSymbol = false;
            foreach (var item in Email)
            {
                if (isDomainSymbol)
                    domain += item;
                if (item == '@')
                    isDomainSymbol = true;
            }
            return domain;

        }



        static void FindDomenFromUrl()
        {
            string url = "https://metanit.com/sharp/tutorial/7.2.php";

            string[] parts = url.Split('/');
            Console.WriteLine(parts[2]);

            Console.Read();

        }



        static void SumOfColumnsTwoDemensionalArray()
        {
            int[,] a = new int[3, 5];

            Random random = new Random();

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 5; j++)
                {
                    a[i, j] = random.Next(10);
                    Console.Write("{0,4}", a[i, j]);
                }
                Console.WriteLine();
            }

            for (int i = 0; i < 5; i++)
            {
                int sum = 0;
                for (int j = 0; j < 3; j++)
                {
                    sum += a[j, i];
                }
                Console.Write("{0,4}", $"{sum}");
            }
            Console.WriteLine();
            Console.Read();

        }



        static void ReplacementOfNumbers2DemensionalArray()
        {
            int[,] a = new int[5, 10];

            Random random = new Random();
            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j < 10; j++)
                {
                    a[i, j] = random.Next(100);
                    if (a[i, j] < 5)
                    {
                        a[i, j] = 111;
                    }
                    Console.Write("{0,4}", a[i, j]);
                }
                Console.WriteLine();
            }

            Console.Read();

        }



        static void MassiveFrom2PreviousElements()
        {
            List<int> massive = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
            List<int> mas = new List<int> { };
            for (int i = 0; i < massive.Count - 1; i++)
            {
                mas.Add(massive[i] + massive[i + 1]);
            }
            foreach (var item in mas)
            {
                Console.Write($" {item}");
            }
            Console.Read();

        }



        static void RadTeilora()
        {
            static double Factorial(uint num)
            {
                if (num <= 1)
                {
                    return 1d;
                }
                return num * Factorial(num - 1);
            }

            static double Sin(double x, int n = 0, double precision = 1e-10)
            {
                var t = Math.Pow(-1, n) * Math.Pow(x, 2 * n + 1) / Factorial((uint)(2 * n + 1));
                if (Math.Abs(t) < precision)
                {
                    return t;
                }
                return t + Sin(x, n + 1, precision);
            }
            static void Main(string[] args)
            {
                var x = double.Parse(Console.ReadLine());
                var result = Sin(x);
                Console.WriteLine("Sin(x)={0:f4}", result);
                Console.WriteLine("Math.Sin(x)={0:f4}", Math.Sin(x));

                Console.ReadKey(true);
            }


        }



        static void SumAndMultiplyOfDoubleInMassive()
        {
            //    class Division 
            //{ 

            //    public static double Sum(double[] sum)
            //    {
            //        double i = 0;
            //        foreach (var item in sum)
            //        {
            //            i += item;
            //        }
            //        return i;
            //    }
            //    public static double Multiply(double[] multiply)
            //    {
            //        double i = 1;
            //        foreach (var item in multiply)
            //        {
            //            i *= item;
            //        }
            //        return i;
            //    }

            //    class Prodi
            //    {
            //        static void Main(string[] args)
            //        {
            //            double[] lol = { 1, 2, 3, 4, 5, 6, 1.1, 1.2, 1.3 };
            //            double[] kek = { 10, 1.5, 10 };

            //            Console.WriteLine(Division.Sum(lol));
            //            Console.WriteLine(Division.Multiply(kek));


            //            Console.ReadKey();
            //        }
            //    }
            //}
        }



        static void WorkingWithClasses()
        {
            //    class Program
            //{
            //    static void Main(string[] args)
            //    {
            //        Person Yura = new Person("Yurii", "Igorich", 22);
            //        Person Igor = new Person("Ihar", "Vladimirich", 23);

            //        Worker worker = new Worker(Yura, "Programmer", 1895.43);
            //        Client client = new Client(Igor, 100);

            //        Helper.SyperDisplay(worker);
            //        Helper.SyperDisplay(client);

            //        //worker.Display();
            //        //client.Display();
            //        Console.ReadKey();
            //    }
            //}
            //public static class Helper
            //{
            //    public static void SyperDisplay(IPerson person)
            //    {
            //        Console.WriteLine($"{person.Name} {person.Surname} {person.Age}");
            //    }
            //}

            //public class Person : IPerson
            //{
            //    public string Name { get; set; }
            //    public string Surname { get; set; }
            //    public int Age { get; set; }
            //    public Person(string name, string surname, int age)
            //    {
            //        Name = name;
            //        Surname = surname;
            //        Age = age;
            //    }
            //    public Person() { }

            //    public virtual void Display()
            //    {
            //        Console.WriteLine($"{Name} {Surname} {Age}");
            //    }
            //}

            //public class Worker : Person
            //{
            //    public string Position { get; set; }
            //    public double Salary { get; set; }
            //    public Worker(Person Yura, string position, double salary) : base(Yura.Name, Yura.Surname, Yura.Age)
            //    {
            //        Position = position;
            //        Salary = salary;
            //    }
            //    public override void Display()
            //    {
            //        Console.WriteLine($"{Name} {Surname} {Age} {Position} {Salary}");
            //    }
            //}
            //public class Client : Person
            //{
            //    public double Cash { get; set; }
            //    public Client(Person Igor, double cash) : base(Igor.Name, Igor.Surname, Igor.Age)
            //    {
            //        Cash = cash;
            //    }
            //    public override void Display()
            //    {
            //        Console.WriteLine($"{Name} {Surname} {Age} {Cash}"); ;
            //    }

            //}
            //public interface IDisplayable
            //{
            //    void Display();
            //}
            //public interface IPerson
            //{
            //    string Name { get; set; }
            //    string Surname { get; set; }
            //    int Age { get; set; }
            //}

        }
    }
}
